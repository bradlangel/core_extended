(** [seed] initializes a pseudo-random number generator.  When multiple tests share a
    deterministic seed, they each get a separate copy of the random generator's state;
    random choices in one test do not affect those in another.  The nondeterministic seed
    causes a fresh random state to be generated nondeterministically for each test. *)
type seed =
  [ `Deterministic of string
  | `Nondeterministic
  ]

module type Janecheck_kernel_config = sig

  module Random_state : module type of Random.State

  (** [default_seed] is used initialize the pseudo-random generator that chooses random
      values from generators, in each test that is not provided its own seed. *)
  val default_seed : seed

  (** [default_trial_count] determines the number of trials per test, except in tests
      that explicitly override it. *)
  val default_trial_count : int

  (** [default_attempt_factor] determines the maximum number of attempts to generate
      inputs for trials, as a factor of the number of trials, except in tests that
      explicitly override it. *)
  val default_attempt_factor : int

end

module type Janecheck_kernel = sig

  include Janecheck_kernel_config

  (** [random_value ~random_state gen] produces a single value chosen from [gen] according
      to [random_state]. *)
  val random_value
    :  ?seed:seed
    -> 'a Generator.t
    -> 'a

  (** [iter ~trials ~attempts gen ~f] runs [f] on up to [trials] different values
      generated by [gen].  It stops successfully after [trials] successful trials or if
      [gen] runs out of values.  It raises an exception if [f] raises an exception or if
      it fails to produce [trials] inputs from [gen] after [attempts] attempts. *)
  val iter
    :  ?seed:seed
    -> ?trials:int
    -> ?attempts:int
    -> 'a Generator.t
    -> f:('a -> unit)
    -> unit

  (** [test ~trials ~attempts ~sexp_of gen ~f] is like [iter], with additional information
      provided on failure.  If [f] raises an exception and [sexp_of] is provided, the
      exception is re-raised with a description of the random input that triggered the
      failure. *)
  val test
    :  ?seed:seed
    -> ?trials:int
    -> ?attempts:int
    -> ?sexp_of:('a -> Sexplib.Sexp.t)
    -> 'a Generator.t
    -> f:('a -> unit)
    -> unit

  (** [test_can_generate ~trials ~attempts ~sexp_of gen ~f] is useful for testing
      [Generator.t] values, to make sure they can generate useful examples.  It tests
      [gen] by generating up to [trials] values and passing them to [f].  Once a value
      satisfies [f], the iteration stops.  If no values satisfy [f], [test_can_generate]
      raises an exception.  If [sexp_of] is provided, the exception includes all of the
      generated values. *)
  val test_can_generate
    :  ?seed:seed
    -> ?trials:int
    -> ?attempts:int
    -> ?sexp_of:('a -> Sexplib.Sexp.t)
    -> 'a Generator.t
    -> f:('a -> bool)
    -> unit

  (** [test_no_duplicates ~trials ~attempts ~sexp_of gen ~by] is useful for testing
      [Generator.t] values, to make sure they do not create duplicate values.  It tests
      [gen] by generating up to [trials] values and comparing each pair of the generated
      values using [by].  If any of the pairs are identical, [test_no_duplicates] raises
      an exception.  If [sexp_of] is provided, the exception includes the identical
      values. *)
  val test_no_duplicates
    :  ?seed:seed
    -> ?trials:int   (* defaults to [default_trial_count * 10] *)
    -> ?attempts:int
    -> ?sexp_of:('a -> Sexplib.Sexp.t)
    -> 'a Generator.t
    -> by:[ `Equal of 'a -> 'a -> bool | `Compare of 'a -> 'a -> int ]
    -> unit

  (* [random_state_of_seed] constructs initial random states for a given seed.  This is
     intended for building extensions to this interface, rather than for use in
     individual tests. *)
  val random_state_of_seed : seed -> Random_state.t

end
